#!/usr/bin/env python
from os import devnull
from serializers.fabric import *
from pr_modules.args import ArgParcer
import code

items_to_dump, items_to_load = ArgParcer.getargs()


def get_fabric(filename: str) -> SerializerFabric | None:
    filetype = filename.lower().split('.')[-1]
    fabrics = {
        'json': JsonSerializerFabric,
        'yaml': YamlSerializerFabric,
        'xml': XmlSerializerFabric
    }
    return fabrics.get(filetype, None)


def dumpobjects(inputstrings):

    def get_object(filename: str, obj_name):
        import sys
        import importlib
        module_name = filename.removesuffix('.py').split('/')[-1]
        module_path = filename.removesuffix(f'{module_name}.py')
        sys.path.append(module_path)

        sys.stdout = open(devnull, "w")
        try:
            mod = importlib.import_module(module_name)
        except Exception:
            pass
        sys.stdout = sys.__stdout__

        item = eval(f'mod.{obj_name}')

        return item

    def dump(item, filename: str) -> any:
        fabric = get_fabric(filename)
        if fabric is None:
            return None
        serializer = fabric.createSerializer()
        serializer.dump(item, filename)
        item = serializer.load(filename)
        return item

    def parceinputstr(inputstr: str):
        filename, _, temp = inputstr.partition(':')
        obj_name, _, file_format = temp.partition(':')
        return (filename, obj_name, file_format)

    for inputstr in inputstrings:
        filename, obj_name, file_format = parceinputstr(inputstr)
        # obj_name = filename.lower().split('.')[-2]
        try:
            item = get_object(filename, obj_name)
            dump(item, f'{obj_name}.{file_format}')
            print(f'{inputstr} dumped to {obj_name}.{file_format}')
        except Exception as e:
            print(f'Error when dumping {inputstr}: {e}')

    print('objects dumped')


def loadfiles(files_to_load):

    def load(filename: str) -> any:
        fabric = get_fabric(filename)
        if fabric is None:
            return None
        serializer = fabric.createSerializer()
        item = serializer.load(filename)
        return item

    for filename in files_to_load:
        obj_name = filename.lower().split('.')[-2]
        try:
            item = load(filename)
            exec(f'{obj_name}= item')
            print(f'{obj_name} loaded from {filename}')
        except Exception as e:
            print(f'Error when loading {filename}: {e}')

    code.interact(local=locals(),
                  banner='Starting interactive prompt', exitmsg='')


if items_to_dump is not None:
    dumpobjects(items_to_dump)

if items_to_load is not None:
    loadfiles(items_to_load)
